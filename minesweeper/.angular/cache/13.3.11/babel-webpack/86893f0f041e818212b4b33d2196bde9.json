{"ast":null,"code":"import { MinesweeperGameOpsModule } from '../modules/minesweeper-game-ops/minesweeper-game-ops.module';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/grid-list\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/icon\";\n\nfunction GridComponent_div_2_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵtext(1, \" Clicked \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridComponent_div_2_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function GridComponent_div_2_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.newFunc(i_r2);\n    })(\"contextmenu\", function GridComponent_div_2_button_3_Template_button_contextmenu_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onRightClick(i_r2);\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"flag\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction GridComponent_div_2_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 8);\n    i0.ɵɵlistener(\"contextmenu\", function GridComponent_div_2_button_4_Template_button_contextmenu_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onRightClick(i_r2);\n    })(\"click\", function GridComponent_div_2_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.newFunc(i_r2);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const GR_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", GR_r1, \" \");\n  }\n}\n\nfunction GridComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-grid-tile\");\n    i0.ɵɵtemplate(2, GridComponent_div_2_button_2_Template, 2, 0, \"button\", 3);\n    i0.ɵɵtemplate(3, GridComponent_div_2_button_3_Template, 3, 0, \"button\", 4);\n    i0.ɵɵtemplate(4, GridComponent_div_2_button_4_Template, 2, 1, \"button\", 5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const GR_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", GR_r1 == 2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", GR_r1 == 3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", GR_r1 != 2 && GR_r1 != 3);\n  }\n} // import { createHostListener, HostListener } from '@angular/compiler/src/core';\n\n\nexport let GridComponent = /*#__PURE__*/(() => {\n  class GridComponent {\n    constructor() {\n      this.arra = [[], []]; // Columns will default to zero but will be changed by init\n\n      this.columns = 0;\n      this.xHeight = 2;\n      this.yHeight = 1;\n      this.xInd = 0;\n      this.yInd = 0;\n      this.gridlist = [];\n      this.getScreenSize();\n    }\n\n    getScreenSize() {\n      this.scrHeight = window.innerHeight;\n      this.scrWidth = window.innerWidth;\n      console.log(this.scrHeight, this.scrWidth);\n    }\n\n    ngOnInit() {\n      this.scrHeight = window.innerHeight;\n      this.scrWidth = window.innerWidth;\n      console.log(this.scrHeight, this.scrWidth); // this.myDate = new Date();\n\n      this.gameOps = new MinesweeperGameOpsModule();\n      console.log(\"init\");\n\n      for (let i = 0; i < 8; i++) {\n        let temp;\n        let maxJ = 0;\n\n        for (let j = 0; j < 8; j++) {\n          // if(i == 2 && j == 2){\n          // temp = this.arra[[i][j]] = 2;\n          // }\n          // else{\n          temp = this.arra[[i][j]] = \"i\" + i + \" j\" + j; // }\n\n          this.gridlist.push(temp);\n\n          if (j > maxJ) {\n            maxJ = j;\n          }\n        }\n\n        this.columns = maxJ + 1;\n      }\n\n      console.log(this.gridlist);\n      console.log(\"end init\");\n    }\n\n    newFunc(inp) {\n      console.log(\"newfunc: \" + inp);\n\n      if (this.gridlist[inp] != 2) {\n        console.log(this.gridlist[inp]);\n        this.gridlist[inp] = 2;\n      } else {\n        this.gridlist[inp] = 0;\n      }\n\n      let ind = inp;\n      this.findIndex(ind, this.columns);\n\n      if (this.xInd && this.yInd) {\n        console.log(\"Left Click\");\n        console.log(\"X: \" + this.xInd + \" Y: \" + this.yInd);\n        console.log(\" \");\n      } //Reset the x and y values\n\n\n      this.xInd = 0;\n      this.yInd = 0;\n    }\n\n    onRightClick(inp) {\n      if (this.gridlist[inp] != 3) {\n        console.log(this.gridlist[inp]);\n        this.gridlist[inp] = 3;\n      } else if (this.gridlist[inp] == 3) {\n        this.gridlist[inp] = 1;\n      } // else{\n      //   this.gridlist[inp] = 0;\n      // }\n\n\n      let ind = inp;\n      this.findIndex(ind, this.columns);\n\n      if (this.xInd && this.yInd) {\n        console.log(\"Right Click\");\n        console.log(\"X: \" + this.xInd + \" Y: \" + this.yInd);\n        console.log(\" \");\n      } // console.log(\"right clicked: \" + inp);\n      //Reset the x and y values\n\n\n      this.xInd = 0;\n      this.yInd = 0;\n      return false;\n    }\n\n    findIndex(inp, columns) {\n      // let yInd:number = 0;\n      // let xInd:number = 0;\n      let tempImp = inp; // console.log(\"tempImp: \" + tempImp);\n      // console.log(\"columns\" + columns);\n\n      if (tempImp < columns) {\n        this.yInd = 0;\n        this.xInd = tempImp;\n      }\n\n      if (tempImp >= columns) {\n        while (tempImp > columns) {\n          tempImp = tempImp - columns;\n          this.yInd++;\n        }\n\n        this.xInd = tempImp;\n\n        if (this.xInd == columns) {\n          this.xInd = 0;\n          this.yInd++;\n        }\n      }\n\n      this.gameOps.newestFunction(); // console.log(\"X: \" + this.xInd + \" Y: \" + this.yInd);\n    }\n\n  }\n\n  GridComponent.ɵfac = function GridComponent_Factory(t) {\n    return new (t || GridComponent)();\n  };\n\n  GridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GridComponent,\n    selectors: [[\"app-grid\"]],\n    hostBindings: function GridComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function GridComponent_resize_HostBindingHandler($event) {\n          return ctx.getScreenSize($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 3,\n    vars: 4,\n    consts: [[1, \"grid\"], [3, \"cols\", \"rowHeight\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"clicked\", \"type\", \"button\", \"disabled\", \"\", \"style\", \"height: 100%; width: 100%;\", 4, \"ngIf\"], [\"class\", \"right-clicked\", \"type\", \"button\", \"mat-button\", \"\", \"style\", \"height: 100%; width: 100%;\", 3, \"click\", \"contextmenu\", 4, \"ngIf\"], [\"type\", \"button\", \"mat-button\", \"\", \"style\", \"height: 100%; width: 100%;\", 3, \"contextmenu\", \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"disabled\", \"\", 1, \"clicked\", 2, \"height\", \"100%\", \"width\", \"100%\"], [\"type\", \"button\", \"mat-button\", \"\", 1, \"right-clicked\", 2, \"height\", \"100%\", \"width\", \"100%\", 3, \"click\", \"contextmenu\"], [\"type\", \"button\", \"mat-button\", \"\", 2, \"height\", \"100%\", \"width\", \"100%\", 3, \"contextmenu\", \"click\"]],\n    template: function GridComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-grid-list\", 1);\n        i0.ɵɵtemplate(2, GridComponent_div_2_Template, 5, 3, \"div\", 2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"cols\", ctx.columns);\n        i0.ɵɵpropertyInterpolate2(\"rowHeight\", \"\", ctx.xHeight, \":\", ctx.yHeight, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.gridlist);\n      }\n    },\n    directives: [i1.MatGridList, i2.NgForOf, i1.MatGridTile, i2.NgIf, i3.MatButton, i4.MatIcon],\n    styles: [\".grid[_ngcontent-%COMP%]{border-style:solid;border-color:#00f}mat-grid-tile[_ngcontent-%COMP%]{background:lightblue;border-style:solid;border-color:#20b2aa}mat-grid-tile[_ngcontent-%COMP%]:hover{background-color:#f5f5f5}.clicked[_ngcontent-%COMP%]{background:lightgray;color:#000}.right-clicked[_ngcontent-%COMP%]{background:lightsalmon;color:red}\"]\n  });\n  return GridComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}